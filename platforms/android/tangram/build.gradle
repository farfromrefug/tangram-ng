apply plugin: 'com.android.library'

group = 'com.mapzen.tangram'
version = '0.17.2-SNAPSHOT'

android {
  compileSdkVersion 36
  namespace 'com.mapzen.tangram'

  // Specific ABI targets can be chosen with the 'abis' property as a comma-separated list of ABIs.
  // From the command line, add '-Ptangram.abis=armeabi-v7a,x86,...' to only build those ABIs.
  // When building from Android Studio, the ABI for the target device is injected and takes precedence.
  def abi = 'arm64-v8a'
  if (!project.hasProperty('android.injected.invoked.from.ide') && project.hasProperty('tangram.abis')) {
    abi = project.getProperty('tangram.abis')
  }

  defaultConfig {
    minSdkVersion 21
    targetSdkVersion 36
    consumerProguardFiles 'tangram-proguard-rules.txt'
    buildConfigField 'String', 'TAG', '"Tangram"'
    externalNativeBuild {
      cmake {
        targets 'tangram'
        arguments '-DTANGRAM_PLATFORM=android',
                  '-DANDROID_STL=c++_shared'
                  '-DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON'
        cppFlags '-std=c++20',
                 '-fvisibility=hidden', // export only JNIEXPORT
                 '-pedantic',
                 '-fPIC',
                 '-fexceptions',
                 '-frtti',
                 // linker
                 '-Wl,--exclude-libs,ALL', // dont export static lib symbols
                 //warnings
                 '-Wall',
                 '-Wignored-qualifiers',
                 '-Wtype-limits',
                 '-Wno-missing-field-initializers',
                 '-Wno-format-pedantic',
                 '-Wno-gnu-statement-expression',
                 '-Wno-gnu-anonymous-struct',
                 '-Wno-nested-anon-types',
                 '-Wno-unused-command-line-argument', // for -Wl linker flags..
                 '-Wno-unknown-warning-option'
        if (project.findProperty('tangram.ccache')) {
          arguments += '-DCMAKE_CXX_COMPILER_LAUNCHER=ccache'
          arguments += '-DCMAKE_C_COMPILER_LAUNCHER=ccache'
        }
        if (abi == 'all') {
          abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        } else {
          abiFilters abi.split(',')
        }

      }
    }
  }

  externalNativeBuild {
    cmake {
      version '3.30.5'
      path '../../../CMakeLists.txt'
    }
  }

  // next time, be sure to install versions listed at developer.android.com/build/releases/gradle-plugin#compatibility
  ndkVersion '28.2.13676358'

  buildFeatures {
    buildConfig true
  }

  lintOptions {
    abortOnError false
    disable 'ExpiredTargetSdkVersion'
  }

  buildTypes {
    debug {
      externalNativeBuild {
        cmake.cppFlags '-g'
      }
    }
    release {
      externalNativeBuild {
        cmake.cppFlags'-g0'
      }
    }
  }
}

dependencies {
  api 'com.squareup.okhttp3:okhttp:5.2.1'
  implementation 'androidx.annotation:annotation:1.1.0'
}

//apply from: 'publishing.gradle'
