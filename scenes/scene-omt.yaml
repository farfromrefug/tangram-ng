# adaption of tangram default scene.yaml to OpenMapTiles vector tile schema
# - don't seem to be many services using mapzen schema (except HERE)
# - no one uses mapbox schema except mapbox?
# - sufficiently different from mapzen schema that trying to create schema that works for both (w/ some globals)
#  isn't practical
# - mapzen walkabout style is nice, but way too big - nearly 10K lines
import:
    - raster-contour.yaml
    #- markers.yaml

global:
    #feature_order: function () { return feature.sort_rank; }
    sdk_api_key: ''

    camera_settings: { type: isometric, axis: [-.2, .2] }

    # TODO: globals can be nested, so replace global.color_ with global.color.
    color_landuse: honeydew
    color_parks: '#bddec5'
    color_park_detail: '#9dbea5'
    color_golf: hsl(124, 83%, 88%)  #'#C8FACC'
    color_industry: '#C0CDCD'
    color_retail: '#FEF0D0'
    color_civic: '#D9CFC3'
    color_urban_7: lightgrey
    color_urban_9: [.88, .88, .88]
    color_water: '#9dc3de'
    color_water_name: "#51909c"
    color_water_halo: "#e2eef0"
    color_beach: '#FEEFC3'  #[1.000,0.953,0.900]
    color_ice: white
    color_rock: grey
    color_road: '#fff'
    color_casing_16: '#999'
    color_casing_18: '#aaa'
    color_tunnel: '#E3E3E3'
    color_tunnel_casing: '#A0A0A0'
    color_motorway: '#FDE293'
    #color_motorway_5: '#F89595'
    #color_motorway_7: '#D16768'
    color_motorway_link: '#FDE293'  #'#aaa'
    color_motorway_muted: '#eee'
    color_path: '#fff'
    color_transit: '#EB322F'
    color_rail: [0.588,0.671,0.698]
    color_ferry: '#8db3ce'
    color_runway_13: '#FFE4B5'
    color_runway_16: '#fff'
    color_runway_casing: orange
    color_airport: '#ddd'
    color_road_name: '#666'
    color_ferry_name: '#8db3ce'
    color_border: wheat
    color_border_country: [0.824, 0.651, 0.329, 1.00]
    color_city_point: darkred
    color_place_name: [0, 0, 0, .8]
    color_hood_name: rgba(136, 45, 23, 0.9)
    color_bldg: [.83, .83, .83]
    color_bldg_3d: [.83, .83, .83, 0.5]
    color_bldg_3d_line: [.75, .75, .73, 0.5]
    color_park_name: darkgreen

    # priorities for colliding objects (points and text) - float in tangram (docs incorrectly say integer)
    priority_boundary: 0
    priority_continent: 8
    priority_place: 9
    priority_neighborhood: 10
    priority_park: 21
    priority_forest: 22
    # road labels
    priority_motorway_name: 25
    priority_motorway_ref: 25
    priority_road_primary: 30
    priority_road_secondary: 40
    priority_road_tertiary: 50
    priority_road_minor: 60
    # transit line labels
    priority_transit_ref: 100
    priority_transit_ref_tram: 200
    priority_transit_ref_bus: 300
    # transit stops
    priority_bus_stop: 20  # bus stops only shown when show_transit = true
    priority_station_transit: 5 # transit station priority when show_transit = true
    priority_station_default: 29  # transit station priority when show_transit = false
    priority_station_tram: 6  # only shown when show_transit = true
    # we want to show every traffic light if showing any
    priority_traffic_light: 4
    # POIs - use osm_id to provide well-defined ordering so POIs don't get replaced by nearby ones when zooming in
    priority_poi_default: function() { return Number('101.' + feature.osm_id.substring(feature.osm_id.length - 6)); }
    priority_poi_viewpoint: function() { return Number('31.' + feature.osm_id.substring(feature.osm_id.length - 6)); }
    priority_poi_toilet: function() { return Number('32.' + feature.osm_id.substring(feature.osm_id.length - 6)); }
    priority_poi_university: function() { return Number('33.' + feature.osm_id.substring(feature.osm_id.length - 6)); }
    priority_poi_grocery: function() { return Number('34.' + feature.osm_id.substring(feature.osm_id.length - 6)); }
    priority_poi_culture: function() { return Number('41.' + feature.osm_id.substring(feature.osm_id.length - 6)); }
    priority_poi_restaurant: function() { return Number('43.' + feature.osm_id.substring(feature.osm_id.length - 6)); }
    priority_poi_cafe: function() { return Number('44.' + feature.osm_id.substring(feature.osm_id.length - 6)); }
    priority_poi_convenience: function() { return Number('51.' + feature.osm_id.substring(feature.osm_id.length - 6)); }
    priority_poi_school: function() { return Number('52.' + feature.osm_id.substring(feature.osm_id.length - 6)); }
    priority_poi_religion: function() { return Number('101.' + feature.osm_id.substring(feature.osm_id.length - 6)); }
    priority_poi_parking: function() { return Number('102.' + feature.osm_id.substring(feature.osm_id.length - 6)); }

    poi_sprite_fn: |
        function()
        {
          const tourism = { "viewpoint": "viewpoint", "camp_site": "campground", "information": "information",
            "museum": "museum", "hotel": "hotel", "motel": "hotel", "hostel": "hotel", "guest_house": "hotel",
            "bed_and_breakfast": "hotel", "chalet": "hotel", "alpine_hut": "hotel", "attraction": "attraction",
            "artwork": "artwork", "gallery": "shop"
          };
          const historic = { "monument": "artwork" };
          const leisure = { "fitness_centre": "gym", "sports_centre": "gym" };
          const amenity = { "parking": "parking", "bicycle_rental": "bike_shop", "university": "university",
            "school": "university", "college": "university", "kindergarten": "university",
            "restaurant": "restaurant", "fast_food": "restaurant", "ice_cream": "restaurant", "cafe": "cafe",
            "pharmacy": "pharmacy", "bar": "bar", "pub": "bar", "nightclub": "bar", "library": "library",
            "cinema": "theatre", "theatre": "theatre", "concert_hall": "theatre", "arts_centre": "theatre",
            "place_of_worship": "church", "bank": "bank", "hospital": "hospital", "clinic": "doctor", "doctors": "doctor",
            "fuel": "fuel", "dentist": "dentist", "toilets": "toilet", "drinking_water": "drinking_water",
            "water_point": "drinking_water"
          };
          const shop = { "beverages": "cafe", "confectionery": "cafe", "bakery": "bakery", "pastry": "bakery",
            "supermarket": "grocery", "convenience": "convenience", "greengrocer": "convenience", "deli": "convenience",
             "delicatessen": "convenience", "butcher": "convenience", "farm": "convenience", "alcohol": "liquor",
             "wine": "liquor", "clothes": "clothes", "tailor": "clothes", "fashion_accessories": "clothes",
             "shoes": "clothes", "fashion": "clothes", "hardware": "hardware", "doityourself": "hardware",
             "bicycle": "bike_shop", "chemist": "pharmacy", "car_repair": "auto_repair", "laundry": "laundry",
             "dry_cleaning": "laundry", "hairdresser": "scissor", "beauty": "scissor"
          };
          return tourism[feature.tourism] || leisure[feature.leisure] || amenity[feature.amenity] ||
              historic[feature.historic] || shop[feature.shop] || (feature.shop ? "shop" : "");
        }

    # if we want to easily add on top of various raster sources, have MapsSources set global._vector_order to
    #  layer number for vector source
    show_polygons: true  # function() { return !(global._vector_order > 0); }
    show_bike: false
    show_transit: false
    show_trails: false
    mute_motorways: false
    show_contours: 1

    gui_variables:
        - name: show_polygons
          label: Polygons
        - name: show_bike
          label: Bike
        - name: show_transit
          label: Transit
        - name: show_trails
          label: Hike
        - name: mute_motorways
          label: Mute motorways  # in app, this would be set automatically when bike/hike/transit shown
        - name: u_exaggerate
          style: terrain  # not hillshade!
          label: Hillshade Exaggeration  # but in general, make gui_variables a map instead of an array so it can be merged!

    # specify fields indexed for search
    search_data:
        - layer: poi
          fields: name, amenity, leisure, shop, sport, tourism
        - layer: place
          fields: name


fonts:
    Montserrat:
        url: fonts/Montserrat-Regular.woff
    Open Sans:
        - weight: 400
          url: fonts/OpenSans-Regular.woff
        - weight: 400
          style: italic
          url: fonts/OpenSans-Italic.woff
        - weight: 600
          url: fonts/OpenSans-Semibold.woff


scene:
    background:
        color: [.97, .955, .94] #'#f0ebeb'


cameras:
    camera1: global.camera_settings


lights:
    light1: { visible: false }
    light2:
        type: directional
        origin: world
        direction: [1, 1, -1]
        diffuse: [.3, .3, .3, 1.]
        ambient: [0.7, 0.7, 0.7, 1.]


textures:
    pois:
        url: img/pois.svg
        density: 2
        # sprites set from svg ids

    pois-search:
        url: img/pois-search.svg
        density: 2

    marker-stroked:
        url: img/marker-stroked.png
        density: 2


styles:
    #icons:
    #    base: points
    #    texture: pois
    #    draw:
    #        interactive: true
    heightglow:
        base: polygons
        blend: translucent
        blend_order: -2
        lighting: vertex
        shaders:
            blocks:
                color: "color.rgb += vec3(worldPosition().z / 800.);"
    heightglowline:
        base: lines
        blend_order: -1
        mix: heightglow
    # dash only supported for styles, not draw block because each dash pattern requires separate shader
    dashed-path:
        base: lines
        lighting: false
        dash: [3.0, 0.5]
    dashed-track:
        base: lines
        lighting: false
        dash: [2.5, 1.0]
    dashed-steps:
        base: lines
        lighting: false
        dash: [0.5, 0.5]
    dashed-bike:
        base: lines
        lighting: false
        dash: [1.0, 1.0]
    #dashed-tunnel:
    #    base: lines
    #    lighting: false
    #    dash: [3, 2]
    unlit-lines:
        base: lines
        lighting: false
    transit-lines:
        base: lines
        blend: overlay
        blend_order: -2
        draw: # default draw parameters
            color: gray  #function() { return feature.colour || 'gray'; }
            alpha: 0.25
            width: 6px
            outline:
                color: [.8, .8, .8]
                alpha: 0.25
                width: 1px
            interactive: true
    terrain:
        mix: hillshade
        shaders:
            defines:
                CONTOUR_COLOR: vec4(0.7,0.7,0.7,1.)
                SHOW_CONTOURS: global.show_trails
                ELEVATION_INDEX: 0

sources:
    #normals:
    #    type: Raster
    #    url: https://elevation-tiles-prod.s3.amazonaws.com/normal/{z}/{x}/{y}.png
    #    max_zoom: 14
    #    cache: normals
    osm:
        type: MVT
        url: file:///home/mwhite/maps/tilemaker/sf.mbtiles
        #url: file:///home/mwhite/maps/sf.mbtiles  # maptiler 2017 extract
        #url: file:///home/mwhite/maps/SanFrancisco-bbbike.mbtiles   # from bbbike.org, but no bike info!
        #url: http://tiles.basemaps.cartocdn.com/vectortiles/carto.streets/v1/{z}/{x}/{y}.mvt
        #url: https://6ug7hetxl9.execute-api.us-east-2.amazonaws.com/data/v3/{z}/{x}/{y}.pbf
        max_zoom: 14
        rasters: [elevation]

layers:
    earth:
        data: { source: elevation }
        enabled: global.show_polygons
        draw:
            polygons:
                style: terrain
                order: 0

    landcover:
        data: { source: osm, layer: landcover }
        enabled: global.show_polygons
        #filter:
        #    - { $zoom: { min: 16 } }
        #    #- { area: { min: 500px2 } }
        areas:
            draw:
                polygons:
                    style: terrain
                    order: 3
                    color: global.color_landuse
            green:
                filter: { class: [wood, grass, farmland, wetland] }
                draw: { polygons: { color: global.color_parks } }
                # golf course can be inside park, so make sure it is drawn on top
                golf:
                    filter: { subclass: golf_course }
                    draw: { polygons: { order: 2, color: global.color_golf } }
                park:
                    filter: { subclass: park }
                    draw: { polygons: { order: 1, color: global.color_parks } }
            beach:
                filter: { class: sand }
                draw: { polygons: { color: global.color_beach } }
            ice:
                filter: { class: ice }
                draw: { polygons: { color: global.color_ice } }
            rock:
                filter: { class: rock }
                draw: { polygons: { color: global.color_rock } }

    landuse:
        data: { source: osm, layer: landuse }
        enabled: global.show_polygons
        #filter:
        #    - { $zoom: { min: 16 } }
        #    #- { area: { min: 500px2 } }
        areas:
            draw:
                polygons:
                    visible: false
                    style: terrain
                    order: 1
                    color: global.color_landuse
            green:
                filter: { class: [zoo, playground, pitch, cemetery] }
                draw: { polygons: { visible: true, color: global.color_park_detail } }
            retail:
                filter: { class: [retail] }  #industrial, commercial
                draw: { polygons: { visible: true, color: global.color_retail } }
            civic:
                filter: { class: [university, college] }
                draw: { polygons: { visible: true, color: global.color_civic } }
            #urban:
            #    filter: { kind: urban_area }
            #    draw: { polygons: { color: [[7, global.color_urban_7], [9, global.color_urban_9]] } }

    park:
        data: { source: osm, layer: park }
        enabled: global.show_polygons
        #filter:
        #    - { $zoom: { min: 16 } }
        #    #- { area: { min: 500px2 } }
        draw:
            polygons:
                style: terrain
                order: 1
                color: global.color_parks

    water:
        data: { source: osm, layer: water }
        enabled: global.show_polygons
        draw:
            polygons:
                order: 5
                color: global.color_water
        #ocean:
        #    filter: { class: ocean}
        #inter:
        #    filter: { class: [lake, river] }

    water_name:
        data: { source: osm, layer: water_name }
        filter:
            #name: true
            - $zoom: { min: 17 }
            - area: { min: 500px2 }
        draw:
            text:
                #interactive: true
                text_source: name
                transition: { show: { time: 0s }, hide: { time: 1s } }
                font:
                    family: Open Sans
                    fill: global.color_water_name
                    stroke: { color: global.color_water_halo, width: 2 }
                    style: italic
                    size: 12px
        oceans:
            filter: { class: 'ocean', $zoom: { min: 1, max: 8 } }
            draw: { text: { font: { size: 14pt } } }
        seas:
            filter: { class: [lake, sea], $zoom: { min: 7 } }
            draw: { text: { font: { size: [[9, 9px], [17, 10px], [18, 12px]] } } }

    waterway:
        data: { source: osm, layer: waterway }
        draw:
            lines:
                order: 4
                color: global.color_water
                width: [[7,0.5px],[8,1px],[15,2px]]
        river:
            filter: { class: river }
            draw:
                text:
                    text_source: name
                    #buffer: 3px
                    font:
                        family: Open Sans
                        fill: global.color_water_name
                        stroke: { color: global.color_water_halo, width: 2 }
                        style: italic
                        size: [[11, 0px], [12, 8px], [14, 9px], [16, 10px], [17, 11px]]
        #minor:
        #    filter: { class: [stream, canal] }

    transportation:
        data: { source: osm, layer: transportation }
        filter: { not: { class: [transit, route] } }
        draw:
            lines:
                style: unlit-lines
                color: global.color_road
                width: 12
                order: 40
                outline:
                    color: [[16, global.color_casing_16], [18, global.color_casing_18]]
                    width: 0  #[[15, 0], [16, 2]]
                    order: 10 # put all outlines below all roads
        rounded:
            filter: { $zoom: { min: 18 } }
            draw: { lines: { cap: round } }
        bridge:
            filter: { brunnel: bridge }
            priority: 1
            draw: { lines: { order: 100 } }
        tunnel:
            filter: { brunnel: tunnel, $zoom: { min: 14 } }
            priority: 1
            draw: { lines: { color: global.color_tunnel, outline: { color: global.color_tunnel_casing } } }
        motorway:
            filter: { class: motorway }
            draw:
                lines:
                    order: 80
                    color: 'function() { return global.mute_motorways ? global.color_motorway_muted : global.color_motorway; }'
                    #[[5, global.color_motorway_5], [7, global.color_motorway_7]]
                    width: [[5, 1px], [8, 1.5px], [14, 2px], [15, 12]]
                    outline:
                        width: [[14, 0], [15, 2]]
            link:
                filter: { ramp: 1 }
                draw:
                    lines:
                        #color: global.color_motorway_link
                        width: [[13, 0], [14, 12]]
        major_road:
            filter: { class: [trunk, primary, secondary], $zoom: { min: 10 } }
            draw:
                lines:
                    order: 70
                    width: [[10, 0], [13, 2px], [14, 2px], [16, 12]]
                    outline:
                        width: [[16, 0], [17, 1]]
        minor_road:
            filter: { class: [tertiary, minor, service] }
            draw:
                lines:
                    order: 60
                    width: [[13, 0px], [14, 1px], [15, 8]]
                    outline:
                        width: [[17, 0], [18, 1]]
            service:
                filter: { class: service }
                draw: { lines: { width: [[15, 0px], [16, 4px], [17, 8]] } }
            parking:
                filter: { service: parking_aisle }
                draw: { lines: { width: [[15, 0px], [16, 2px], [17, 4]] } }
        paths:
            filter: { class: path }
            draw:
                lines:
                    order: 50
                    style: dashed-path
                    color: global.color_path
                    width: [[14, 0px], [15, 1px], [18, 3px]]
                    outline:
                        width: 0
            steps:
                filter: { subclass: steps }
                draw: { lines: { style: dashed-steps, width: [[14, 0px], [15, 3px], [18, 6px]] } }
            unpaved:
                enabled: global.show_trails
                filter:
                    - subclass: false  # highway=path in OSM
                    - { subclass: footway, surface: unpaved }
                draw: { lines: { color: '#B06000', width: [[10, 1px], [18, 3px]] } }

        tracks:
            filter: { class: track }
            draw:
                lines:
                    order: 50
                    style: dashed-track
                    color: global.color_path
                    width: [[14, 1px], [15, 2px], [18, 4px]]
                    outline:
                        width: 0

        # unpaved road: dashed w/ outline?  track: same as unpaved road if motor_vehicle: yes, otherwise like path
        rail:
            filter: { class: rail, $zoom: { min: 10 } }
            draw:
                lines:
                    order: 40
                    color: global.color_rail
                    width: [[12, 1px], [14, 1px], [16, 2px]]
            tunnel:
                filter: { brunnel: tunnel }
                draw: { lines: { width: [[16, 0px], [17, 2px]] } }
            hidden:
                filter: { not: { subclass: [rail, light_rail, narrow_gauge, tram, funicular] } }
                draw: { lines: { visible: false } }
        ferry:
            filter: { class: ferry }
            draw:
                lines:
                    style: dashed-path
                    color: global.color_ferry
                    width: [[14, 1px], [18, 2px]]
                    outline:
                        width: 0
        road-icons:
            arrows:
                # oneway arrows and shields are distinct groups!
                exclusive: true
                filter: { oneway: 1, $zoom: { min: 17 } }
                draw:
                    points:
                        texture: pois
                        flat: true
                        sprite: arrow
                        size: [[17, 18px], [18, 20px], [20, 32px]]
                        placement: spaced
                        placement_spacing: [[17, 70px], [20, 175px]]
                        angle: auto

    transportation_name:
        data: { source: osm, layer: transportation_name }
        filter:
            name: true
            not: { class: [rail, aeroway] }
        draw:
            text:
                interactive: true
                text_source: |
                    function() {
                       return feature.name.replace(" Avenue", " Ave.").replace(" Street", " St.").replace(" Boulevard", " Blvd.").replace(" Drive", " Dr.").replace(" Lane", " Ln.").replace(" Road", " Rd.");
                    }
                transition: { show: { time: 0s }, hide: { time: 1s } }
                font:
                    family: Open Sans
                    fill: global.color_road_name
                    stroke: { color: white, width: 2 }
                    size: 12px

        motorway:
            exclusive: true
            filter: { class: motorway, $zoom: {min: 13} }
            draw:
                text:
                    visible: function() { return !global.mute_motorways; }
                    repeat_distance: 200px
                    repeat_group: road_labels
                    priority: global.priority_motorway_name
                    font:
                        stroke: { color: white, width: 4 }
                        transform: capitalize

        shields:
            exclusive: true
            filter:
                network: us-interstate
            draw:
                points:
                    texture: pois
                    sprite: shield
                    # sprite: function() { return feature.network }
                    priority: global.priority_motorway_ref
                    color: white
                    size: 24px
                    placement: midpoint
                    repeat_group: shields
                    text:
                        repeat_distance: 150px
                        anchor: center
                        text_source: ref
                        font:
                            family: sans-serif
                            size: 11px
                            fill: white

            # thin-out shields at low-zoom
            thinning:
                filter: { $zoom: { max: 11 } }
                draw:
                    points:
                        repeat_distance: 75px

        primary:
            exclusive: true
            filter:
                any:
                    - {class: trunk, $zoom: {min: 13}}
                    - {class: primary, $zoom: {min: 14}}
            draw:
                text:
                    repeat_distance: 100px
                    repeat_group: roads
                    priority: global.priority_road_primary
                    font:
                        size: 14px
                        stroke: { color: white, width: 4 }

        secondary:
            exclusive: true
            filter: { class: secondary, $zoom: { min: 14 } }
            draw:
                text:
                    repeat_distance: 100px
                    repeat_group: roads
                    priority: global.priority_road_secondary
                    font:
                        size: 14px
                        stroke: { color: white, width: 4 }

        tertiary:
            exclusive: true
            filter: { class: tertiary, $zoom: { min: 15 } }
            draw:
                text:
                    priority: global.priority_road_tertiary
                    font:
                        size: 12px
                        stroke: { color: white, width: 4 }

        minor:
            exclusive: true
            filter: { class: minor, $zoom: { min: 16 } }
            draw:
                text:
                    priority: global.priority_road_minor
                    font:
                        size: 10px
                        stroke: { color: white, width: 4 }

        ferry:
            exclusive: true
            filter: { class: ferry }
            draw:
                text:
                    text_wrap: 20
                    font:
                        fill: global.color_ferry_name
                        stroke: { color: white, width: 4px }
                        style: italic

    airports:
        data: { source: osm, layer: aeroway }
        draw:
            lines:
                color: global.color_airport
                outline:
                    width: 0

        taxiways:
            filter: { class: taxiway }
            draw:
                lines:
                    width: [[13, 0px], [14, 2px], [17, 10px]]

        runways:
            filter: { class: runway }
            draw:
                lines:
                    color: [[13, global.color_runway_13], [16, global.color_runway_16]]
                    width: [[11, 3px], [12, 5px], [13, 10px], [15, 75]]
                    cap: square
                    outline:
                        color: global.color_runway_casing
                        width: [[11, 0px], [12, 1px], [13, 2px], [15, 12.5]]

    bicycle:
        data: { source: osm, layer: transportation }
        filter:
            any:
                - { class: [track, path], bicycle: [designated, yes] }
                - { class: track, subclass: cycleway }
                - cycleway: true
                - cycleway_right: true
                - cycleway_left: true
        enabled: global.show_bike
        draw:
            lines:
                style: unlit-lines
                color: '#008800'  #global.color_road
                width: [[13, 2px], [14, 3px]]
                order: 120
        track:
            exclusive: true
            priority: 1
            filter:
                any:
                    - { class: [track, path], bicycle: [designated, yes] }
                    - { class: track, subclass: cycleway }
                    - cycleway: [track, opposite_track]
                    - cycleway_left: [track, opposite_track]
                    - cycleway_right: [track, opposite_track]
            draw: { lines: { color: '#004C00' } }
            unpaved:
                filter: { surface: unpaved }
                draw: { lines: { style: dashed-bike, color: '#B06000' } }
        lane:
            exclusive: true
            priority: 2
            filter:
                any:
                    - cycleway: [lane, opposite_lane]
                    - cycleway_left: [lane, opposite_lane]
                    - cycleway_right: [lane, opposite_lane]
            draw: { lines: { color: '#008800' } }
        shared:
            exclusive: true
            priority: 3
            filter:
                any:
                    - cycleway: [shared_lane, shoulder]
                    - cycleway_left: [shared_lane, shoulder]
                    - cycleway_right: [shared_lane, shoulder]
            draw: { lines: { style: dashed-bike, color: '#008800' } }

    transit:
        data: { source: osm, layer: transportation }
        filter:
            $zoom: {min: 12}
            any:
                - class: transit
                - { class: route, route: [train, light_rail, subway, tram, monorail] }
                - { class: route, route: [bus, trolleybus], $zoom: {min: 14} }
        enabled: global.show_transit
        draw:
            lines:
                width: [[13, 3px], [14, 4px]]
                order: 150
                #style: transit-lines
                color: function() { return feature.color || global.color_transit; }
            text:
                interactive: true
                priority: global.priority_transit_ref
                text_source: ref  #'function() { return feature.ref.length < 6 ? feature.ref : ''; }'
                # non-zero offset bypasses addCurvedTextLabels, which generates massive number of label
                #  objects, resulting in label collider pegging CPU
                offset: [0px, -0.5px]
                repeat_distance: 400px
                font:
                    family: Open Sans
                    fill: white  #'function() { return feature.color == "yellow" ? "#555": "white"; }'
                    stroke:
                        color: function() { return feature.color || global.color_transit; }
                        width: 3
                    size: 14px
        secondary:
            filter: { class: route, route: [light_rail, tram, monorail] }
            draw:
                lines: { width: [[13, 2px], [14, 3px]] }
                text: { priority: global.priority_transit_ref_tram }
        bus:
            filter: { class: route, route: [bus, trolleybus] }
            draw:
                lines: { width: [[14, 1px], [16, 2px]] }
                text: { priority: global.priority_transit_ref_bus }


    buildings:
        data: { source: osm, layer: building }
        filter: { $zoom: { min: 14 } }
        enabled: global.show_polygons
        draw:
            polygons:
                style: heightglow
                order: 10
                color: global.color_bldg

        # extrude 3d buildings
        extruded:
            filter: { $zoom: { min: 15 } }
            draw:
                polygons:
                    extrude: function () { return feature.render_height > 20 || $zoom >= 16; }
                    color: global.color_bldg_3d
                    order: 1001
                lines:
                    style: heightglowline
                    width: 2px
                    color: global.color_bldg_3d_line
                    order: 1000
                    extrude: true

    peaks:
        data: { source: osm, layer: mountain_peak }
        enabled: global.show_trails
        filter:
            rank: 1.0  # only the highest peak in each tile
            ele_ft: true
            #$zoom: { max: 13 }
            #class: [peak, volcano]  -- not present in carto DB
        draw:
            points:
                texture: pois
                sprite: peak
                size: 14px
                interactive: true
                collide: true
                transition: { show: { time: 0s }, hide: { time: 1s } }
                text:
                    interactive: true
                    text_source: 'function() { if(!feature.name) { return feature.ele_ft; }  const name = feature.name.length > 17 ? feature.name.substring(0, 17) + "…" : feature.name;  return name + "\n" + feature.ele_ft; }'
                    text_wrap: 100
                    max_lines: 2
                    font:
                        family: Open Sans
                        style: italic
                        size: 8pt
                        fill: black

    pois:
        data: { source: osm, layer: poi }
        draw:
            points:
                texture: pois
                size: [[13, 16px], [15, 20px]]
                interactive: true
                collide: true
                transition: { show: { time: 0s }, hide: { time: 1s } }
                text:
                    interactive: true
                    anchor: [right, left, bottom, top]
                    max_lines: 2
                    font:
                        family: Open Sans
                        size: 1.2em
                        fill: black
                        stroke: { color: white, width: 3 }
        parks:
            exclusive: true
            priority: 1
            filter:
                name: true
                all:
                    - any:
                        - { leisure: [park, golf_course] }
                        - { amenity: [grave_yard] }
                        - { landuse: [cemetery] }
                    - any:
                        - { $zoom: { min: 17 } }
                        - { area: { min: 2000px2 } }
            draw:
                points:
                    sprite: tree
                    priority: global.priority_park
                    text:
                        font:
                            size: 10pt
                            style: italic
                            fill: global.color_park_name
                            stroke: { color: white, width: 3 }
            golf:
                filter: { leisure: golf_course }
                draw: { points: { sprite: golf } }
            cemetery:
                filter:
                    - { amenity: [grave_yard] }
                    - { landuse: [cemetery] }
                draw: { points: { sprite: cemetery } }

        forest:
            exclusive: true
            priority: 2
            filter:
                class: forest
                any:
                    - { $zoom: { min: 7 }, tier: 1 }
                    - { $zoom: { min: 9 }, tier: { max: 3 } }
            draw:
                points:
                    visible: false
                text:
                    priority: global.priority_forest
                    font:
                        size: 9pt
                        style: italic
                        fill: global.color_park_name
                        stroke: { color: white, width: 3 }

        station:
            exclusive: true
            priority: 3
            filter:
                railway: [station, tram_stop]
                $zoom: { min: 13 }
            # show_transit: stations at 13, station labels at 14; default: stations at 15, station labels at 16
            # - trying to implement this logic w/o using JS functions was a horrible disaster
            draw:
                points:
                    visible: 'function() { return $zoom >= (global.show_transit ? 13 : 15); }'
                    priority: 'function() { return global.show_transit ? global.priority_station_transit : global.priority_station_default; }'
                    sprite: train
                    size: [[13, 12px], [15, 18px]]
                    text:
                        visible: 'function() { return $zoom >= (global.show_transit ? 14 : 16); }'
                        optional: 'function() { return !global.show_transit; }'
                        font:
                            size: 12px
            tram:
                filter:
                    - railway: tram_stop
                    - station: light_rail
                draw:
                    points:
                        sprite: tram
                        priority: global.priority_station_tram
                        size: [[13, 10px], [15, 16px]]
                        visible: global.show_transit

        bus_stop:
            exclusive: true
            priority: 4
            filter: { highway: bus_stop,  $zoom: { min: 16 } }  # [{ class: bus, subclass: bus_stop }, { class: bus_stop } ]
            draw:
                points:
                    sprite: bus
                    size: [[16, 12px], [18, 16px]]
                    visible: global.show_transit
                    priority: global.priority_bus_stop
                    text: { visible: false }

        traffic_signals:
            exclusive: true
            priority: 5
            filter: { $zoom: { min: 19 }, highway: traffic_signals }
            draw:
                points:
                    interactive: false
                    sprite: traffic_light
                    priority: global.priority_traffic_light
                    text: { visible: false }

        not_landuse:
            exclusive: true
            filter:
                $zoom: { min: 14 }
                any:
                    - name: true
                    - tourism: [viewpoint, camp_site, information]
                    - amenity: [parking, bicycle_rental, drinking_water, water_point, toilets]
                not:
                    - { railway: subway_entrance }
                    - 'function() { return global.search_active; }'
            draw:
                points:
                    interactive: true
                    sprite: global.poi_sprite_fn
                    priority: global.priority_poi_default
                    text:
                        font:
                            size: 12px
                            fill: black
                            stroke: { color: white, width: 3 }
            # make label optional at higher zoom to show more POI icons
            labels:
                filter: { $zoom: { min: 17 } }
                draw: { points: { text: { optional: true } } }
            # add generic icon at high zoom
            generic:
                filter: { $zoom: { min: 18 }, name: true }
                draw: { points: { sprite_default: generic } }
            points:
                viewpoint:
                    exclusive: true
                    filter: { tourism: [viewpoint, camp_site] }
                    draw:
                        points:
                            visible: global.show_trails
                            priority: global.priority_poi_viewpoint
                    default:
                        filter: { $zoom: { min: 17 } }
                        draw: { points: { visible: true } }
                parking:
                    exclusive: true
                    filter: { amenity: parking }
                    draw:
                        points:
                            visible: global.show_trails    # parking == trailhead!
                            priority: global.priority_poi_parking
                    default:
                        filter: { $zoom: { min: 18 } }
                        draw: { points: { visible: true } }
                information:
                    exclusive: true
                    filter: { tourism: information }
                    draw: { points: { visible: false } }
                    show:
                        filter: { $zoom: { min: 17 } }
                        draw: { points: { visible: true } }
                bike_rental:
                    exclusive: true
                    filter: { amenity: bicycle_rental }  #{ class: amenity, subclass: bicycle_rental }
                    draw: { points: { visible: global.show_bike } }
                university:
                    exclusive: true
                    filter: { amenity: university }
                    draw: { points: { priority: global.priority_poi_university } }
                school:
                    exclusive: true
                    filter: { amenity: [school, college, kindergarten] }
                    draw: { points: { visible: false, priority: global.priority_poi_school } }
                    show:
                        filter: { $zoom: { min: 16 } }
                        draw: { points: { visible: true } }
                restaurant:
                    exclusive: true
                    filter: { amenity: [restaurant, fast_food] }
                    draw: { points: { priority: global.priority_poi_restaurant } }
                cafe:
                    exclusive: true
                    filter:
                        - amenity: [cafe, ice_cream]
                        - shop: [beverages, confectionery, bakery, pastry]
                    draw: { points: { priority: global.priority_poi_cafe } }
                grocery:
                    exclusive: true
                    filter: { shop: supermarket }
                    draw: { points: { priority: global.priority_poi_grocery } }
                convenience:
                    exclusive: true
                    filter: { shop: [convenience, greengrocer, deli, delicatessen, butcher, farm] }
                    draw: { points: { priority: global.priority_poi_convenience } }
                culture:
                    exclusive: true
                    filter:
                        - amenity: [cinema, theatre, concert_hall, arts_centre, library]
                        - tourism: museum
                    draw: { points: { priority: global.priority_poi_culture } }
                church:
                    exclusive: true
                    filter: { amenity: place_of_worship }
                    draw: { points: { visible: false, priority: global.priority_poi_religion } }
                    show:
                        filter: { $zoom: { min: 16 } }
                        draw: { points: { visible: true } }
                toilet:
                    exclusive: true
                    filter: { amenity: [drinking_water, water_point, toilets] }
                    draw: { points: { visible: false, priority: global.priority_poi_toilet } }
                    show:
                        filter: { $zoom: { min: 18 } }
                        draw: { points: { visible: true } }

    boundaries:
        data: { source: osm, layer: boundary }
        draw:
            lines:
                visible: false
                order: 3
                width: 2px
                color: global.color_border

            text:
                priority: global.priority_boundary
                text_source:
                    left: 'adm0_l'
                    right: 'adm0_r'
                font:
                    family: Open Sans
                    size: 12px
                    fill: global.color_place_name
                    stroke: { color: white, width: 4 }
                    transform: uppercase
                    weight: bold

        country:
            filter: { admin_level: 2 }
            draw:
                lines:
                    visible: true
                    color: global.color_border_country

        region:
            filter: { admin_level: [3, 4] }
            draw:
                lines:
                    visible: true

    places:
        data: { source: osm, layer: place }

        continents:
            filter: { class: continent, $geometry: point }
            draw:
                text:
                    priority: global.priority_continent
                    font:
                        family: Open Sans
                        size: 12px
                        fill: [0, 0, 0, .8]
                        stroke: { color: white, width: 4 }
                        transform: uppercase

        # city labels with points
        city-points:
            filter:
                class: city
                $zoom: { max: 11 }
            visible: true
            draw:
                points:
                    size: 8px
                    color: global.color_city_point
                    text:
                        priority: global.priority_place
                        font:
                            family: Open Sans
                            fill: global.color_place_name
                            stroke: { color: white, width: 4 }
                            transform: uppercase
                            weight: bold
                            size: [[8, 11px], [12, 16px]]

        # places w/text-only labels (not accompanying point)
        text-only:
            draw:
                text:
                    visible: false
                    priority: global.priority_place
                    font:
                        family: Open Sans
                        size: 12px
                        fill: global.color_place_name
                        stroke: { color: white, width: 4 }
                        transform: uppercase

            countries:
                exclusive: true
                filter:
                    class: country
                    any:
                        - { population: { min: 100000000 } }
                        - { $zoom: { min: 5, max: 8 }, population: { min: 1000000 } }
                        # - population: { min: 10000000 }
                draw:
                    text:
                        visible: true
                        font:
                            weight: bold
                            size: [[6, 14px], [8, 20px]]

            regions:
                exclusive: true
                filter:
                    class: [state, province]
                    $zoom: { min: 5, max: 9 }
                draw:
                    text:
                        visible: true
                        font:
                            # weight: bold
                            size: [[6, 12px], [8, 16px]]

                # use short name when available at low-zooms
                short:
                    filter: { $zoom: { max: 7 } }
                    draw:
                        text:
                            text_source: 'name:short'

            cities:
                exclusive: true
                filter:
                    class: city
                    $zoom: { min: 11 } # show city point labels below z11
                draw:
                    text:
                        visible: true
                        font:
                            weight: bold
                            size: [[8, 11px], [12, 16px]]

            neighborhoods:
                exclusive: true
                filter:
                    - { class: [neighbourhood, quarter], $zoom: { min: 13 } }
                    #- { class: microhood, $zoom: { min: 15 } }
                draw:
                    text:
                        priority: global.priority_neighborhood
                        visible: true
                        font:
                            size: [[13, 11px], [14, 11px], [15, 13px]]
                            style: italic
                            fill: global.color_hood_name
